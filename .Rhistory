TRUE ~"West Coast"),
) %>% select(-padd)
gas_national_average <- gas_raw %>%
mutate(year = year(period), month=month(period), period_month=as.Date(paste0(year,"-", month, "-01"))) %>%
filter(month(period_month) < current_month) %>%
group_by(period_month) %>%
summarise(monthly_average = round(mean(price),2), .groups = "drop") %>%
mutate(padd_descrip="National (All Regions)")
gas_monthly_average_w_national <- rbind(gas_monthly_average,gas_national_average)
gas_over_time_plot <- ggplot(data = gas_monthly_average_w_national, aes(x = period_month, y=monthly_average))+
geom_line(aes(color = padd_descrip))+
theme_minimal()+
scale_x_date(date_breaks = "5 years", date_labels="%Y")+
scale_y_continuous(breaks = seq(0,ceiling(max(gas_monthly_average_w_national$monthly_average)), by = 1),
limits = c(0, NA)) +
labs(y="Dollars", x="", color = "Region", title="Average Gas Price per Month")
ggplotly(gas_over_time_plot)
yearly_average <- gas_raw %>%
mutate(year = year(period), month=month(period), period_month=as.Date(paste0(year,"-", month, "-01"))) %>%
filter(month(period_month) < current_month) %>%
group_by(year) %>%
summarise(yearly_average = round(mean(price),2), .groups = "drop")
trend_recent_years <- gas_monthly_average_w_national %>%
filter(year(period_month)>=2020, padd_descrip=="National (All Regions)") %>%
mutate(year = year(period_month)) %>%
left_join(yearly_average, by="year")
gas_over_time_plot_recent <- ggplot(data = trend_recent_years, aes(x = as.Date(period_month), y=monthly_average))+
geom_line(aes(color = "Monthly Average"), linewidth=0.75)+
geom_line(aes(y=yearly_average, color="Yearly Average"), linewidth=0.75)+
geom_vline(xintercept = as.Date("2021-01-01"), linetype = "dashed", color = "blue") +
geom_vline(xintercept = as.Date("2022-01-01"), linetype = "dashed", color = "blue") +
geom_vline(xintercept = as.Date("2023-01-01"), linetype = "dashed", color = "blue") +
theme_minimal()+
scale_x_date(date_breaks = "6 months", date_labels="%m/%y")+
scale_y_continuous(breaks = seq(0,ceiling(max(trend_recent_years$monthly_average)), by = 1),
limits = c(0, NA)) +
labs(y="Dollars", x="", color = "", title="Average Gas Price per Month: 2020-YTD")+
theme(text = element_text(size = 14), # Set all text size to 14
axis.title = element_text(size = 14), # Set axis titles size to 14
axis.text = element_text(size = 14), # Set axis text size to 14
plot.title = element_text(size = 14))
ggplotly(gas_over_time_plot_recent)
cutoff <- Sys.Date() %m-% months(6)
trend_data_weeks <- trend_recent_years %>%
filter(as.Date(period_month)>=as.Date(cutoff))
gas_over_time_plot_recent_weeks <- ggplot(data = trend_data_weeks, aes(x = as.Date(period_month), y=monthly_average))+
geom_line(aes(color = "Monthly Average"), linewidth=0.75)+
geom_line(aes(y=yearly_average, color="Yearly Average"), linewidth=0.75)+
geom_point(aes(color = "Monthly Average"))+
geom_text(aes(label=monthly_average, color = "Monthly Average"), vjust=1.5, show.legend = FALSE)+
theme_minimal()+
scale_x_date(date_breaks = "1 months", date_labels="%m/%y")+
scale_y_continuous(breaks = seq(0,ceiling(max(trend_recent_years$monthly_average)), by = 1),
limits = c(0, NA)) +
labs(y="Dollars", x="", color = "Region", title="Average Gas Price: Past 6 Months")+
theme(text = element_text(size = 14), # Set all text size to 14
axis.title = element_text(size = 14), # Set axis titles size to 14
axis.text = element_text(size = 14), # Set axis text size to 14
plot.title = element_text(size = 14))
plotly(gas_over_time_plot_recent_weeks)
cutoff <- Sys.Date() %m-% months(6)
trend_data_weeks <- trend_recent_years %>%
filter(as.Date(period_month)>=as.Date(cutoff)) %>%
mutate(text_pos = monthly_average-1.5)
gas_over_time_plot_recent_weeks <- ggplot(data = trend_data_weeks, aes(x = as.Date(period_month), y=monthly_average))+
geom_line(aes(color = "Monthly Average"), linewidth=0.75)+
geom_line(aes(y=yearly_average, color="Yearly Average"), linewidth=0.75)+
geom_point(aes(color = "Monthly Average", y=text_pos))+
geom_text(aes(label=monthly_average, color = "Monthly Average"), vjust=1.5, show.legend = FALSE)+
theme_minimal()+
scale_x_date(date_breaks = "1 months", date_labels="%m/%y")+
scale_y_continuous(breaks = seq(0,ceiling(max(trend_recent_years$monthly_average)), by = 1),
limits = c(0, NA)) +
labs(y="Dollars", x="", color = "Region", title="Average Gas Price: Past 6 Months")+
theme(text = element_text(size = 14), # Set all text size to 14
axis.title = element_text(size = 14), # Set axis titles size to 14
axis.text = element_text(size = 14), # Set axis text size to 14
plot.title = element_text(size = 14))
ggplotly(gas_over_time_plot_recent_weeks)
cutoff <- Sys.Date() %m-% months(6)
trend_data_weeks <- trend_recent_years %>%
filter(as.Date(period_month)>=as.Date(cutoff)) %>%
mutate(text_pos = monthly_average-.25)
gas_over_time_plot_recent_weeks <- ggplot(data = trend_data_weeks, aes(x = as.Date(period_month), y=monthly_average))+
geom_line(aes(color = "Monthly Average"), linewidth=0.75)+
geom_line(aes(y=yearly_average, color="Yearly Average"), linewidth=0.75)+
geom_point(aes(color = "Monthly Average"))+
geom_text(aes(y = text_pos, label=monthly_average, color = "Monthly Average"), vjust=1.5, show.legend = FALSE)+
theme_minimal()+
scale_x_date(date_breaks = "1 months", date_labels="%m/%y")+
scale_y_continuous(breaks = seq(0,ceiling(max(trend_recent_years$monthly_average)), by = 1),
limits = c(0, NA)) +
labs(y="Dollars", x="", color = "Region", title="Average Gas Price: Past 6 Months")+
theme(text = element_text(size = 14), # Set all text size to 14
axis.title = element_text(size = 14), # Set axis titles size to 14
axis.text = element_text(size = 14), # Set axis text size to 14
plot.title = element_text(size = 14))
ggplotly(gas_over_time_plot_recent_weeks)
dist_plot_data <- gas_monthly_average_w_national %>%
mutate(year = year(period_month)) %>%
filter(year %in% c(2021, 2022, 2023))
price_dist_plot <- ggplot(dist_plot_data, aes(x = monthly_average, fill = as.factor(year))) +
geom_density(alpha = 0.5) +  # Adjust alpha for transparency
facet_wrap(~padd_descrip) +
scale_fill_brewer(palette = "Set1") +
scale_x_continuous(breaks = seq(floor(min(dist_plot_data$monthly_average)), ceiling(max(dist_plot_data$monthly_average)), by = 0.5)) +
theme_minimal() +
theme(panel.spacing = unit(1, "lines")) +
labs(title="Price Distribution by Year by Region", fill = "Year", x = "Monthly Average", y = "Density")
ggplotly(price_dist_plot)#, width = 1000, height = 500)
View(gas_monthly_average)
View(gas_monthly_average_w_national)
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)") %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
model <- lm(log_monthly_average ~ period_month, data = data)
# Summarize the model
summary(model)
# Optional: Create a plot
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = FALSE) +
theme_minimal() +
labs(title = "Log-Linear Regression of Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average")
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2010) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
model <- lm(log_monthly_average ~ period_month, data = data)
# Summarize the model
summary(model)
# Optional: Create a plot
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = FALSE) +
theme_minimal() +
labs(title = "Log-Linear Regression of Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average")
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2006) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
model <- lm(log_monthly_average ~ period_month, data = data)
# Summarize the model
summary(model)
# Optional: Create a plot
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = FALSE) +
theme_minimal() +
labs(title = "Log-Linear Regression of Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average")
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
model <- lm(log_monthly_average ~ period_month, data = data)
# Summarize the model
summary(model)
# Optional: Create a plot
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = FALSE) +
theme_minimal() +
labs(title = "Log-Linear Regression of Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average")
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
#model <- lm(log_monthly_average ~ period_month, data = data)
model_poly <- lm(log_monthly_average ~ poly(period_month, 2), data = data)
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
data$days_since_start <- as.numeric(data$period_month - min(data$period_month))
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
#model <- lm(log_monthly_average ~ period_month, data = data)
model_poly <- lm(log_monthly_average ~ poly(period_month, 2), data = data)
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
data$days_since_start <- as.numeric(data$period_month - min(data$period_month))
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
#model <- lm(log_monthly_average ~ period_month, data = data)
model_poly <- lm(log_monthly_average ~ poly(days_since_start, 2), data = data)
# Summarize the model
summary(model)
# Optional: Create a plot
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_smooth(method = 'lm', formula = y ~ x, se = FALSE) +
theme_minimal() +
labs(title = "Log-Linear Regression of Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average")
(exp(7.703e-05)-1)*100
1.25*1.007703297
1.26*1.007703297
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
data$days_since_start <- as.numeric(data$period_month - min(data$period_month))
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
#model <- lm(log_monthly_average ~ period_month, data = data)
model_poly <- lm(log_monthly_average ~ poly(days_since_start, 2), data = data)
# Summarize the model
summary(model)
# Optional: Create a plot
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_line(aes(y = predicted), color = "blue") +
labs(title = "Polynomial Regression of Log Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average") +
theme_minimal()
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
data$days_since_start <- as.numeric(data$period_month - min(data$period_month))
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
#model <- lm(log_monthly_average ~ period_month, data = data)
model_poly <- lm(log_monthly_average ~ poly(days_since_start, 2), data = data)
# Summarize the model
summary(model)
data$predicted <- predict(model_poly)
# Optional: Create a plot
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_line(aes(y = predicted), color = "blue") +
labs(title = "Polynomial Regression of Log Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average") +
theme_minimal()
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
data$days_since_start <- as.numeric(data$period_month - min(data$period_month))
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
#model <- lm(log_monthly_average ~ period_month, data = data)
model_poly <- lm(log_monthly_average ~ poly(days_since_start, 6), data = data)
# Summarize the model
summary(model)
data$predicted <- predict(model_poly)
# Optional: Create a plot
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_line(aes(y = predicted), color = "blue") +
labs(title = "Polynomial Regression of Log Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average") +
theme_minimal()
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
data$days_since_start <- as.numeric(data$period_month - min(data$period_month))
# Fit a linear regression model
# Assuming you want to model the log of monthly_average as a function of time
#model <- lm(log_monthly_average ~ period_month, data = data)
model_poly <- lm(log_monthly_average ~ poly(days_since_start, 6), data = data)
# Summarize the model
summary(model)
# Extract the coefficient for days_since_start
coefficient <- coef(model)["days_since_start"]
# Calculate the percentage change
percentage_change <- (exp(coefficient) - 1) * 100
# Print the percentage change
paste("Average monthly percentage change in gas prices:", round(percentage_change, 4), "%")
data$predicted <- predict(model_poly)
# Optional: Create a plot
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_line(aes(y = predicted), color = "blue") +
labs(title = "Polynomial Regression of Log Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average") +
theme_minimal()
# Extract the coefficient for days_since_start
coefficient <- coef(model_poly)["days_since_start"]
# Extract the coefficient for days_since_start
coefficient <- coef(model_poly)["poly(days_since_start, 6)1"]
# Calculate the percentage change
percentage_change <<- (exp(coefficient) - 1) * 100
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
data$days_since_start <- as.numeric(data$period_month - min(data$period_month))
# Fit model
model_poly <- lm(log_monthly_average ~ poly(days_since_start, 6), data = data)
# Summarize the model
summary(model_poly)
# Extract the coefficient for days_since_start
coefficient <- coef(model_poly)["poly(days_since_start, 6)1"]
# Calculate the percentage change
percentage_change <<- (exp(coefficient) - 1) * 100
#create predictions for plot
data$predicted <- predict(model_poly)
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_line(aes(y = predicted), color = "blue") +
labs(title = "Polynomial Regression of Log Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average") +
theme_minimal()
coef(model_poly)
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
data$days_since_start <- as.numeric(data$period_month - min(data$period_month))
# Fit model
model_poly <- lm(log_monthly_average ~ poly(days_since_start, 6), data = data)
# Summarize the model
summary(model_poly)
# Extract the coefficient for days_since_start
coefficient <- coef(model_poly)["poly(days_since_start, 6)1"]
# Calculate the percentage change
percentage_change <<- (exp(coefficient) - 1) * 100
#create predictions for plot
data$predicted <- predict(model_poly)
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_line(aes(y = predicted), color = "blue") +
labs(title = "Polynomial Regression of Log Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average") +
theme_minimal()
percentage_change
# Calculate predicted values at two different time points (e.g., start and end of your dataset)
predicted_start <- predict(model_poly, newdata = data.frame(days_since_start = min(data$days_since_start)))
predicted_end <- predict(model_poly, newdata = data.frame(days_since_start = max(data$days_since_start)))
# Calculate the percentage change between these two points
percentage_change_interval <- (exp(predicted_end - predicted_start) - 1) * 100
percentage_change_interval
#create predictions for plot
data$predicted <- predict(model_poly)
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_line(aes(y = predicted), color = "blue") +
labs(title = "Polynomial Regression of Log Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average") +
theme_minimal()
# Calculate the number of months in the dataset
total_days <- max(data$days_since_start) - min(data$days_since_start)
number_of_months <- total_days / 30  # Approximate number of months
# Calculate the average monthly percentage change
average_monthly_percentage_change <- (1 + percentage_change_interval / 100)^(1 / number_of_months) - 1
average_monthly_percentage_change <- average_monthly_percentage_change * 100
# Print the result
average_monthly_percentage_change
install.packages("stargazer")
library(stargazer)
# Summarize the model
#summary(model_poly)
stargazer(model_poly, type = "text")
# Read the data (replace 'your_data.csv' with the actual file name)
data <- gas_monthly_average_w_national %>%
filter(padd_descrip == "National (All Regions)", year(period_month)>2000) %>%
select(-padd_descrip)
# Convert period_month to Date format
data$period_month <- ymd(data$period_month)
# Convert the dependent variable to logarithmic scale
data$log_monthly_average <- log(data$monthly_average)
data$days_since_start <- as.numeric(data$period_month - min(data$period_month))
# Fit model
model_poly <- lm(log_monthly_average ~ poly(days_since_start, 5), data = data)
# Summarize the model
#summary(model_poly)
stargazer(model_poly, type = "text")
# Calculate predicted values at two different time points (e.g., start and end of your dataset)
predicted_start <- predict(model_poly, newdata = data.frame(days_since_start = min(data$days_since_start)))
predicted_end <- predict(model_poly, newdata = data.frame(days_since_start = max(data$days_since_start)))
# Calculate the percentage change between these two points
percentage_change_interval <- (exp(predicted_end - predicted_start) - 1) * 100
#create predictions for plot
data$predicted <- predict(model_poly)
ggplot(data, aes(x = period_month, y = log_monthly_average)) +
geom_point() +
geom_line(aes(y = predicted), color = "blue") +
labs(title = "Polynomial Regression of Log Monthly Average Over Time",
x = "Period Month",
y = "Log of Monthly Average") +
theme_minimal()
# Calculate the number of months in the dataset
total_days <- max(data$days_since_start) - min(data$days_since_start)
number_of_months <- total_days / 30  # Approximate number of months
# Calculate the average monthly percentage change
average_monthly_percentage_change <- (1 + percentage_change_interval / 100)^(1 / number_of_months) - 1
average_monthly_percentage_change <- average_monthly_percentage_change * 100
# Define the number of months to predict (6 months)
n_months <- 6
# Define the starting date for prediction (replace with your actual starting date)
starting_date <- as.Date("2023-01-01")
# Create a sequence of future dates
future_dates <- seq(starting_date, by = "1 month", length.out = n_months)
# Calculate the corresponding days_since_start for future dates
future_days_since_start <- as.numeric(future_dates - min(data$period_month))
# Predict the logarithm of gas prices for future dates
log_predictions <- predict(model_poly, newdata = data.frame(days_since_start = future_days_since_start))
# Convert log predictions to actual gas prices
actual_predictions <- exp(log_predictions)
# Print or use 'actual_predictions' for your future gas price estimates
print(actual_predictions)
# Define the number of months to predict (6 months)
n_months <- 6
# Define the starting date for prediction (replace with your actual starting date)
starting_date <- as.Date("2024-01-01")
# Create a sequence of future dates
future_dates <- seq(starting_date, by = "1 month", length.out = n_months)
# Calculate the corresponding days_since_start for future dates
future_days_since_start <- as.numeric(future_dates - min(data$period_month))
# Predict the logarithm of gas prices for future dates
log_predictions <- predict(model_poly, newdata = data.frame(days_since_start = future_days_since_start))
# Convert log predictions to actual gas prices
actual_predictions <- exp(log_predictions)
# Print or use 'actual_predictions' for your future gas price estimates
print(actual_predictions)
# Define the number of months to predict (6 months)
n_months <- 6
# Define the starting date for prediction (replace with your actual starting date)
starting_date <- as.Date("2023-12-01")
# Create a sequence of future dates
future_dates <- seq(starting_date, by = "1 month", length.out = n_months)
# Calculate the corresponding days_since_start for future dates
future_days_since_start <- as.numeric(future_dates - min(data$period_month))
# Predict the logarithm of gas prices for future dates
log_predictions <- predict(model_poly, newdata = data.frame(days_since_start = future_days_since_start))
# Convert log predictions to actual gas prices
actual_predictions <- exp(log_predictions)
# Print or use 'actual_predictions' for your future gas price estimates
print(actual_predictions)
