gr_results <- gr_results %>%
dplyr::group_by(label) %>%
dplyr::arrange(error_metric) %>%
dplyr::mutate(replace_mean = (.model == "mean") & (lead(error_metric) <= 1.02 * error_metric)) %>%
dplyr::filter(!replace_mean | is.na(replace_mean)) %>%
dplyr::distinct(label, .keep_all = TRUE)
if (!is.null(specific_label_nths)) {
gr_results <- gr_results %>% filter(!label %in% names(specific_label_nths))
gr_results <- rbind(gr_results, gr_results_specific)
}
# Return the nth best model
return(gr_results)
}
get_best_tuning_results(gr_results)
get_best_tuning_results(gr_results)
best_model <- get_best_tuning_results(gr_results)
fcst_training_data = gas_national_average_tsibble
if (best_model$.model == "mean") {
model_formula <- MEAN(value ~ window(size = best_model$window_size))
} else if (best_model$.model == "ets") {
model_formula <- ETS(value ~ error(as.character(best_model$error)) +
trend(as.character(best_model$trend)) +
season(as.character(best_model$seasonal)))
} else if (best_model$.model == "arima") {
if (best_model$log_transform) {
if (!is.null(best_model$K) && !is.na(best_model$K) && length(best_model$K) > 0) {
model_formula <- ARIMA(log(value) ~ pdq(best_model$p, best_model$d, best_model$q) + fourier(K = best_model$K))
} else {
model_formula <- ARIMA(log(value) ~ pdq(best_model$p, best_model$d, best_model$q))
}
} else {
if (!is.null(best_model$K) && !is.na(best_model$K) && length(best_model$K) > 0) {
model_formula <- ARIMA(value ~ pdq(best_model$p, best_model$d, best_model$q) + fourier(K = best_model$K))
} else {
model_formula <- ARIMA(value ~ pdq(best_model$p, best_model$d, best_model$q))
}
}
} else if (model_name == "var") {
model_formula <- VAR(value ~ order(best_model$order))
} else {
model_formula <- SNAIVE(value ~ lag("year"))
}
trained_model <- fcst_training_data %>%
model(!!best_model$.model := model_formula)
trained_model
fcsts <- trained_model %>%
forecast(h = glue::glue("{forecast_interval_months} months"))
fcsts
fcsts_out <- fcsts %>%
transmute(date = as.Date(year_month), value = .mean) %>%
select(-year_month, -.model)
fcsts_out <- fcsts %>%
transmute(date = as.Date(year_month), value = .mean) %>%
select(-year_month, -.model)
fcsts
fcsts %>%
transmute(date = as.Date(year_month), value = .mean)
fcsts %>%
as_tibble()
fcsts %>%
as_tibble() %>%
transmute(date = as.Date(year_month), value = .mean)
trained_model
fcsts_out <- fcsts %>%
as_tibble() %>%
transmute(date = as.Date(year_month), value = .mean)
fcst_results
fcst_results <- create_forecasts(best_model = best_model, fcst_training_data = gas_national_average_tsibble)
create_forecasts <- function(best_model, fcst_training_data) {
if (best_model$.model == "mean") {
model_formula <- MEAN(value ~ window(size = best_model$window_size))
} else if (best_model$.model == "ets") {
model_formula <- ETS(value ~ error(as.character(best_model$error)) +
trend(as.character(best_model$trend)) +
season(as.character(best_model$seasonal)))
} else if (best_model$.model == "arima") {
if (best_model$log_transform) {
if (!is.null(best_model$K) && !is.na(best_model$K) && length(best_model$K) > 0) {
model_formula <- ARIMA(log(value) ~ pdq(best_model$p, best_model$d, best_model$q) + fourier(K = best_model$K))
} else {
model_formula <- ARIMA(log(value) ~ pdq(best_model$p, best_model$d, best_model$q))
}
} else {
if (!is.null(best_model$K) && !is.na(best_model$K) && length(best_model$K) > 0) {
model_formula <- ARIMA(value ~ pdq(best_model$p, best_model$d, best_model$q) + fourier(K = best_model$K))
} else {
model_formula <- ARIMA(value ~ pdq(best_model$p, best_model$d, best_model$q))
}
}
} else if (model_name == "var") {
model_formula <- VAR(value ~ order(best_model$order))
} else {
model_formula <- SNAIVE(value ~ lag("year"))
}
trained_model <- fcst_training_data %>%
model(!!best_model$.model := model_formula)
fcsts <- trained_model %>%
forecast(h = glue::glue("{forecast_interval_months} months"))
fcsts_out <- fcsts %>%
as_tibble() %>%
transmute(date = as.Date(year_month), value = .mean)
return(list(fcst = fcsts_out, model = trained_model))
}
fcst_results <- create_forecasts(best_model = best_model, fcst_training_data = gas_national_average_tsibble)
fcst_results
View(fcst_results)
forecast <- fcst_results[['fcst']]
saveRDS(model, "forecast_model.RDS")
gas_national_average_tsibble
forecast
gas_national_final <- gas_national_average_tsibble %>%
as_tibble() %>%
transmute(date=as.Date(year_month), value)
gas_national_final
forecast
gas_national_final <- gas_national_average_tsibble %>%
as_tibble() %>%
transmute(date=as.Date(year_month), value, forecast=0)
gas_national_final
final_forecast <- rbind(gas_national_final, forecast %>% mutate(forecast=1))
final_forecast
View(final_forecast)
train_results <- create_forecasts(best_model = best_model, fcst_training_data = train)
train_fcst <- train_results[['fcst']]
final_forecast <- rbind(gas_national_final, forecast %>% mutate(forecast=1), train_fcs %>% mutate(forecast=2))
final_forecast <- rbind(gas_national_final, forecast %>% mutate(forecast=1), train_fcst %>% mutate(forecast=2))
final_forecast
View(final_forecast)
dbExecute(con, "DELETE FROM 'forecast results'")
dbWriteTable(con, "forecast results", df, append = TRUE, row.names = FALSE)
dbExecute(con, "DELETE FROM 'forecast results'")
con <- dbConnect(RSQLite::SQLite(), paste0(here(),"/database/gas_data.db"))
dbExecute(con, "DELETE FROM 'forecast results'")
dbExecute(con, "DELETE FROM 'forecast results'")
con <- dbConnect(RSQLite::SQLite(), paste0(here(),"/database/gas_data.db"))
gas_raw <- dbGetQuery(con, "select * from gas_prices")
con <- dbConnect(RSQLite::SQLite(), paste0(here(),"/database/gas_data.db"))
gas_raw <- dbGetQuery(con, "select * from gas_prices")
source("R/forecast_functions.R")
retrain <- FALSE
create_global_start_end(
fcst_start = "1993-04-05",
fcst_end = floor_date(Sys.Date(),unit = "month")-1,
fcst_test_start = (floor_date(Sys.Date(), unit = "month")-1) - years(1),
fcst_test_end = floor_date(Sys.Date(),unit = "month")-1
)
create_interval_months()
con <- dbConnect(RSQLite::SQLite(), paste0(here(),"/database/gas_data.db"))
library(here)
retrain <- FALSE
create_global_start_end(
fcst_start = "1993-04-05",
fcst_end = floor_date(Sys.Date(),unit = "month")-1,
fcst_test_start = (floor_date(Sys.Date(), unit = "month")-1) - years(1),
fcst_test_end = floor_date(Sys.Date(),unit = "month")-1
)
create_interval_months()
con <- dbConnect(RSQLite::SQLite(), paste0(here(),"/database/gas_data.db"))
gas_raw <- dbGetQuery(con, "select * from gas_prices")
dbExecute(con, "DELETE FROM 'forecast results'")
dbExecute(con, "DELETE FROM 'forecast_results'")
dbWriteTable(con, "forecast_results", final_forecast, append = TRUE, row.names = FALSE)
dbExecute(con, "DELETE FROM 'forecast_results'")
dbWriteTable(con, "forecast_results", final_forecast, append = TRUE, row.names = FALSE)
dbExecute(con, "DELETE FROM 'forecast_results'")
dbWriteTable(con, "forecast_results", final_forecast %>% mutate(date=as.character(date)), append = TRUE, row.names = FALSE)
library(DBI)
library(RSQLite)
library(tidyverse)
library(here)
library(ggplot2)
library(plotly)
knitr::opts_chunk$set(echo = TRUE)
final_forecast <- rbind(forecast %>% mutate(forecast=1), train_fcst %>% mutate(forecast=2))
dbExecute(con, "DELETE FROM 'forecast_results'")
dbWriteTable(con, "forecast_results", final_forecast %>% mutate(date=as.character(date)), append = TRUE, row.names = FALSE)
View(gas_national_final)
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price")
con <- dbConnect(RSQLite::SQLite(), paste0(here(),params$db_file))
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price")
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
mutate(date = paste0(as.Date(year,"-", month, "-01")))
gas_national_average
dbGetQuery(con, "select * from avg_monthly_price") %>%
as.tibble() %>%
mutate(date = paste0(as.Date(year, "-", month, "-01")))
dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
mutate(date = paste0(as.Date(year, "-", month, "-01")))
dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
mutate(date = paste0(year, "-", month, "-01"))
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01")))
gas_national_average
library(DBI)
library(RSQLite)
library(tidyverse)
library(here)
library(ggplot2)
library(plotly)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
mutate((year==year(Sys.Date() & month!=month(Sys.date())) | (year != year(Sys.Date()))
mutate((year==year(Sys.Date() & month<=month(Sys.date())) | (year != year(Sys.Date()))
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter( (year==year(Sys.Date()) & month<=month(Sys.date()) ) | (year != year(Sys.Date())) )
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter( (year==year(Sys.Date()) & month<=month(Sys.Date()) ) | (year != year(Sys.Date())) )
gas_national_average
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01")), year = as.numeric(year), month = as.numeric(month)) %>%
filter( (year==year(Sys.Date()) & month<=month(Sys.Date()) ) | (year != year(Sys.Date())) )
gas_national_average
floor_date(Sys.Date(), "month")
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<= floor_date(Sys.Date(), "month") )
gas_national_average
dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01")))
dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<= floor_date(Sys.Date(), "month") )
dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<= floor_date(Sys.Date(), "month") )
floor_date(Sys.Date(), "month")
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<=as.Date(floor_date(Sys.Date(), "month")))
gas_national_average
dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup()
dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01")))
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date==as.Date(floor_date(Sys.Date(), "month")))
gas_national_average
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<as.Date(floor_date(Sys.Date(), "month")))
gas_national_average
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<as.Date(floor_date(Sys.Date(), "month"))) %>%
transmute(value = mean_price, date, forecast=0)
gas_national_average
fcst_results <- dbGetQuery(con, "select * from forecast_results")
fcst_results
rbind(gas_national_average, fcst_results)
all_data <- rbind(gas_national_average, fcst_results)
ggplot(all_data, aes(x=date, y=value, group=forecast, color=forecast))+
geom_line()
ggplot(all_data, aes(x=date, y=value, group=as.factor(forecast), color=as.factor(forecast)))+
geom_line()
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<as.Date(floor_date(Sys.Date(), "month")), date>=floor_date(Sys.Date(), "year")) %>%
transmute(value = mean_price, date, forecast=0)
gas_national_average
fcst_results <- dbGetQuery(con, "select * from forecast_results")
all_data <- rbind(gas_national_average, fcst_results)
ggplot(all_data, aes(x=date, y=value, group=as.factor(forecast), color=as.factor(forecast)))+
geom_line()
ggplot(all_data, aes(x=date, y=value, group=as.factor(forecast), color=as.factor(forecast)))+
geom_line()+
scale_y_continuous(limits=c(0, NA))
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<as.Date(floor_date(Sys.Date(), "month")), date>=floor_date(Sys.Date(), "year")-years(2)) %>%
transmute(value = mean_price, date, forecast=0)
fcst_results <- dbGetQuery(con, "select * from forecast_results")
all_data <- rbind(gas_national_average, fcst_results)
ggplot(all_data, aes(x=date, y=value, group=as.factor(forecast), color=as.factor(forecast)))+
geom_line()+
scale_y_continuous(limits=c(0, NA))
con <- dbConnect(RSQLite::SQLite(), paste0(here(),params$db_file))
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<as.Date(floor_date(Sys.Date(), "month")), date>=floor_date(Sys.Date(), "year")-years(5)) %>%
transmute(value = mean_price, date, forecast=0)
fcst_results <- dbGetQuery(con, "select * from forecast_results")
all_data <- rbind(gas_national_average, fcst_results)
ggplot(all_data, aes(x=date, y=value, group=as.factor(forecast), color=as.factor(forecast)))+
geom_line()+
scale_y_continuous(limits=c(0, NA))
con <- dbConnect(RSQLite::SQLite(), paste0(here(),params$db_file))
gas_national_average <- dbGetQuery(con, "select * from avg_monthly_price") %>%
as_tibble() %>%
ungroup() %>%
mutate(date = as.Date(paste0(year, "-", month, "-01"))) %>%
filter(date<as.Date(floor_date(Sys.Date(), "month")), date>=floor_date(Sys.Date(), "year")-years(3)) %>%
transmute(value = mean_price, date, forecast=0)
fcst_results <- dbGetQuery(con, "select * from forecast_results")
all_data <- rbind(gas_national_average, fcst_results)
ggplot(all_data, aes(x=date, y=value, group=as.factor(forecast), color=as.factor(forecast)))+
geom_line()+
scale_y_continuous(limits=c(0, NA))+
theme_minimal() %>%
ggplotly()
plot <- ggplot(all_data, aes(x=date, y=value, group=as.factor(forecast), color=as.factor(forecast)))+
geom_line()+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
plot <- ggplot(all_data, aes(x=date, y=value, group=as.factor(forecast), color=as.factor(forecast)))+
geom_line()+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
plot
plot <- ggplot(all_data, aes(x=date, y=value, group=as.factor(forecast), color=as.factor(forecast)))+
geom_line(linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
all_data <- rbind(gas_national_average, fcst_results) %>%
mutate(forecast=as.factor(forecast))
plot <- ggplot(all_data, aes(x=date, y=value, group=forecast, color=forecast))+
geom_line(linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
plot <- ggplot(all_data, aes(x=date, y=value))+
geom_line(aes(group=forecast, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
plot <- ggplot(all_data, aes(x=date, y=value))+
geom_line(aes(group=forecast, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
plot
plot <- ggplot(all_data, aes(x=date, y=value))+
geom_line(aes(group=forecast, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
plot <- ggplot(all_data, aes(x=date, y=value))+
geom_line(aes( color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
plot
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
library(DBI)
library(RSQLite)
library(tidyverse)
library(here)
library(ggplot2)
library(plotly)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
ggplotly(plot)
install.packages("plotly")
install.packages("ggplot2")
library(DBI)
library(RSQLite)
library(tidyverse)
library(here)
library(ggplot2)
library(plotly)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
plot
# Create a simple ggplot object
simple_plot <- ggplot(all_data) +
geom_line(aes(x = date, y = value), linewidth = 0.75) +
theme_minimal()
# Convert to plotly
ggplotly(simple_plot)
ggplotly(plot)
summary(all_data)
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast, group=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
all_data <- rbind(gas_national_average, fcst_results) %>%
mutate(forecast=as.factor(forecast), value=as.numeric(value))
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast, group=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
View(all_data)
all_data <- rbind(gas_national_average, fcst_results) %>%
mutate(forecast=as.numeric(forecast), value=as.numeric(value))
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast, group=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
all_data <- rbind(gas_national_average, fcst_results) %>%
mutate(forecast=as.factor(forecast), value=as.numeric)
all_data <- rbind(gas_national_average, fcst_results) %>%
mutate(forecast=as.factor(forecast), value=as.numeric(value))
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast, group=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
plot
ggplotly(plot)
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast, group=forecast),linewidth = 0.75)
ggplotly(plot)
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
all_data <- rbind(gas_national_average, fcst_results) %>%
mutate(forecast=as.factor(forecast, levels=c(0,1,2)), value=as.numeric(value))
all_data <- rbind(gas_national_average, fcst_results) %>%
mutate(forecast=as.character(forecast), value=as.numeric(value))
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
theme_minimal()
ggplotly(plot)
plot
all_data
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
scale_x_date(date_breaks = "5 years", date_labels = "%Y") +
theme_minimal()
plot
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=value, color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
scale_x_date(date_breaks = "1 years", date_labels = "%Y") +
theme_minimal()
ggplotly(plot)
plot
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=round(value, 2), color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
scale_x_date(date_breaks = "1 years", date_labels = "%Y") +
theme_minimal()
ggplotly(plot)
all_data
all_data$date <- as.Date(all_data$date)
all_data$value <- as.numeric(all_data$value)
all_data$forecast <- as.factor(all_data$forecast)
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=round(value, 2), color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
scale_x_date(date_breaks = "1 years", date_labels = "%Y") +
theme_minimal()
ggplotly(plot)
str(all_data)
ggplotly(p = plot)
plot <- ggplot2(all_data)+
geom_line(aes(x=date, y=round(value, 2), color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
scale_x_date(date_breaks = "1 years", date_labels = "%Y") +
theme_minimal()
plot <- ggplot(all_data)+
geom_line(aes(x=date, y=round(value, 2), color=forecast),linewidth = 0.75)+
scale_y_continuous(limits=c(0, NA))+
scale_x_date(date_breaks = "1 years", date_labels = "%Y") +
theme_minimal()
